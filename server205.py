# -*- coding: utf-8 -*-
#!/usr/bin/env python3
__ùë®ùëºùëªùú¢ùú™ùëπ__ = ["ùëæùëØùë∞ùëªùë¨ ùëµùëµ √ó ùë±ùëºùëµùë∞ùë´ùë∂ ùë≤ùë®ùë∞ √ó ùë¥ùë∞ùëµùëØùë®ùëµùëØùë∫"]
__ùëºùë∫ùë¨ùëπ__ = ["Shin"]
__ùë¨ùú®ùë™__ = ["Shadow"]
__ùë¥ùë∂ùë´ùë¨__ = ["ùë∂ùë©ùë≠ √ó ùë¨ùëµùë™"]
__ùëΩùë¨ùëπùë∫ùë∞ùë∂ùëµ__ = ["242.26.711"]
__ùëæùíÇùíìùíèùíäùíèùíà__ = ["ENC n√†y kh√¥ng h·ªó tr·ª£ m·∫°nh ch·ªâ d√πng cho backend khuy·∫øn c√°o l√™n s√†i ENC ùôãùôÆùôàùôñùôÜùôñùôûùôØùô™"]
__ùëæùíÇùíìùíèùíäùíèùíà__ = ["T·ª´ ch·ªëi khi·∫øu l·∫°i v·ªÅ n·ªôi dung ƒë∆∞·ª£c m√£ h√≥a v√¨ ch√∫ng t√¥i ch·ªâ cung c·∫•p m√£ h√≥a"]

·Ö† = (lambda: vars(__builtins__)["".join(chr(i) for i in [95,95,105,109,112,111,114,116,95,95])])()
inspect = ·Ö†("".join(chr(i) for i in [105,110,115,112,101,99,116]))
_real_inspect = __import__("".join(map(chr,[105,110,115,112,101,99,116])))
base64 = ·Ö†("".join(chr(i) for i in [98,97,115,101,54,52]))
AES = getattr(·Ö†("".join(chr(i) for i in [67,114,121,112,116,111,100,111,109,101,46,67,105,112,104,101,114]), fromlist=["AES"]), "AES")
RSA = getattr(·Ö†("".join(chr(i) for i in [67,114,121,112,116,111,100,111,109,101,46,80,117,98,108,105,99,75,101,121]), fromlist=["RSA"]), "RSA")

key = base64.b64decode(b'sMRZv9a7Yxj4oqOmQE3LYTUdh6W0pcq19Is9Q3b0lBA=')
nonce = base64.b64decode(b'mgtLkDFWKLk=')
ciphertext = base64.b64decode(b'')
signature = base64.b64decode(b'NiaNpjjUgCv+ePXTi10c9mCNnRMk6bszbZI8jOun2TQTmjGVc4GxZRWw0hBoTiKaCemf5/URBXW2DVFKNaK3QJRBXUqZvyXGLaLJ1vwYYLqbWN5WXfO8vCQRfSNoH5IReqDlmRhgyLMRPy0sOxu7A2/YiX83zDQLtHsj4jgay+9S5VrIZ9uQYynmIRmNXTtIozTqsVEvWzT84i9HrqCbnCH6aS+2uaDDJiQoxGMiCnY0QaTzwlmA/ZfLUU1/Jgd4HqpIku0CKRi3ytr6B/XIVYVFCbxpCQa5E+a5v1eoIvHTNy9eVQarwwUc77eUVOcVdyR8Y2xRuEPG+eYxZGYoTKN/Va4gjdG/34vp0U8MfzokwxLpS+snLx7BPfYbDQN48JRag2JJdccwz5J6oB5g1n3CyJXiqn27dSfPUwdBzlS31fUD2LuNIJi/kSpsTNyzQ1KN9HbHP9BiODtT3jlcfKFGBsE9UAggprVuT5mUPbds5Q3eYo0pZjdD26iLh9BY')
public_key = RSA.import_key(base64.b64decode(b'LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUlJQm9qQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FZOEFNSUlCaWdLQ0FZRUFzTW5KTUZnbmFDeUtFSTJYdTFObQpIdVNzRnovbnNMQmw5aFhISHhHYUo4Ni8rUWNrWEhMYVkvSEsxV2wvdlk1eGNFS3U2RklxeitpTE51U2tBSEJSClJhbWs1bE9LaE9tWDM2UGU0c2d1S2c5ZGNWMGZONG5OZzVDRlZxU2pMMzVaVW55WDgwYkZYUEIyNUE2MEg0dmwKQVRKOXZmWThjYmM0STFCUWhmL0JCT3BYQlk4eVkvbkhCWUdpajhGNWFDRDlReE96ZkJTU01MU0xoa1pId285ZgpxQXRRQ04xeUlTeHFRVGl6OUh1Q2JEdVdNQ05MSlN0SE1qamRQcXhGWWk4dTduRnk5djhES1FWalJhT2p5MUtzCmpFblUwQWdsS3dWY2ZNOS85eE1ZQUxza1FqSG12eFNqdHEvem1YY2R3QlY0QUhsL2ZLKzRHLzBLSTdXT0ppeDkKS3dDQVFlc0ZIYjV5MDc0WVU3RnVoV2dReEFmcldPanNDUkgwZDlMUUhwZXdGcmNaemdEeHhadWg3RVVJcW9oUwpKRkZGOENRb01OUkdMSjBxUkZCQUIvWWdtWmVkVVZLNmhjclVyN21KSlkwcStLTXNvamhrUFQrenNZK09wUUsxCjNKZ1drQ1JzMHlLWENvZFJub0ZGTlB2SEQvanZiWVFKVlZ1a1pkd1Z0MjBaQWdNQkFBRT0KLS0tLS1FTkQgUFVCTElDIEtFWS0tLS0t'))

zezoire = (lambda names: (lambda code: (__import__("builtins").exec(code, __import__("builtins").globals()) if names[0] not in _real_inspect.currentframe().f_code.co_names else (_ for _ in ()).throw(MemoryError("Tamper")))))(["".join(chr(i) for i in [112,114,105,110,116]),"".join(chr(i) for i in [101,120,101,99]),"".join(chr(i) for i in [103,108,111,98,97,108,115])])
_sys = __import__("".join(map(chr,[115,121,115])))
_block_list = ["".join(map(chr,[105,110,115,112,101,99,116])),"".join(map(chr,[100,105,115])),"".join(map(chr,[109,97,114,115,104,97,108])),"".join(map(chr,[114,101,113,117,101,115,116,115])),"".join(map(chr,[104,116,116,112])),"".join(map(chr,[104,116,116,112,46,99,108,105,101,110,116])),"".join(map(chr,[117,114,108,108,105,98])),"".join(map(chr,[115,111,99,107,101,116]))]
_orig_modules = {m: _sys.modules.get(m) for m in _block_list}
_err_block = "".join(map(chr,[72,84,84,80,47,72,111,111,107,32,68,101,116,101,99,116,101,100]))
_err_builtin = "".join(map(chr,[78,111,116,32,111,114,105,103,105,110,97,108,32,98,117,105,108,116,105,110,115]))
_err_caller = "".join(map(chr,[85,110,97,117,116,104,111,114,105,122,101,100,32,99,97,108,108,101,114]))
_err_dump = "".join(map(chr, [84, 72, 65, 78, 71, 32, 68, 69, 32, 78, 65, 89, 32, 75, 72, 65, 32, 68, 65, 89, 33, 33, 33]))
_Block = type("".join(map(chr,[95,66,108,111,99,107])),(),{"__getattr__": (lambda self,name: (_ for _ in ()).throw(MemoryError(_err_block))),"__call__": (lambda self,*a,**k: (_ for _ in ()).throw(MemoryError(_err_block)))})

try:
    import sys
    _types = __import__("".join(map(chr,[116,121,112,101,115])))
    _ModuleType = getattr(_types, "".join(map(chr,[77,111,100,117,108,101,84,121,112,101])))
    _real_requests = __import__("".join(map(chr,[114,101,113,117,101,115,116,115])))
    _real_inspect = __import__("".join(map(chr,[105,110,115,112,101,99,116])))
    _real_stack = getattr(_real_inspect, "".join(map(chr,[115,116,97,99,107])))
    _make_safe_requests = (lambda _r,_stackf: 
        type("".join(map(chr,[95,85,108,116,114,97,83,97,102,101,82,101,113,117,101,115,116,115])),
            (_ModuleType,),
            {
                "__getattribute__": (lambda self,name: (
                    (lambda : (
                        (lambda func: 
                            (lambda *a,**k: (
                                (lambda : [
                                    (_ for _ in ()).throw(MemoryError("Tamper detected: requests hook"))
                                    if any(x in getattr(f,"".join(map(chr,[102,105,108,101,110,97,109,101])), "<unknown>").lower() 
                                           for x in (
                                                "".join(map(chr,[109,97,114,115,104,97,108])),
                                                "".join(map(chr,[104,111,111,107])),
                                                "".join(map(chr,[112,121,100,101,118])),
                                                "".join(map(chr,[100,101,98,117,103])),
                                                "".join(map(chr,[116,114,97,99,101,109,97,108,108,111,99])),
                                                "".join(map(chr,[112,100,98]))
                                           )
                                    ) else None
                                    for f in _stackf()
                                ]) or func(*a,**k)
                            ))
                        )(getattr(_r,name))
                    ))() if name in (
                        "".join(map(chr,[103,101,116])),
                        "".join(map(chr,[112,111,115,116])),
                        "".join(map(chr,[112,117,116])),
                        "".join(map(chr,[100,101,108,101,116,101])),
                        "".join(map(chr,[104,101,97,100])),
                        "".join(map(chr,[111,112,116,105,111,110,115])),
                        "".join(map(chr,[114,101,113,117,101,115,116]))
                    ) else (
                        (_ for _ in ()).throw(MemoryError("Tamper detected: requests Session"))
                        if name == "".join(map(chr,[83,101,115,115,105,111,110]))
                        else getattr(_r,name)
                    )
                ))
        }
    )("".join(map(chr,[114,101,113,117,101,115,116,115])))
)

    sys.modules["".join(map(chr,[114,101,113,117,101,115,116,115]))] = _make_safe_requests(_real_requests,_real_stack)


    
    for m in _block_list:
        _sys.modules[m] = _Block()

    _blt = __builtins__ if isinstance(__builtins__, dict) else vars(__builtins__)
    _se = eval("".join(map(chr,[101,120,101,99])))
    _si = eval("".join(map(chr,[95,95,105,109,112,111,114,116,95,95])))
    _so = eval("".join(map(chr,[111,112,101,110])))

    (lambda: ((_ for _ in ()).throw(MemoryError(_err_builtin)) if eval("".join(map(chr,[101,120,101,99]))) is not _se or eval("".join(map(chr,[95,95,105,109,112,111,114,116,95,95]))) is not _si or eval("".join(map(chr,[111,112,101,110]))) is not _so else None))()
    

    

    _bad = [''.join([chr(c) for c in [116,114,97,99,101,109,97,108,108,111,99]]),''.join([chr(c) for c in [112,105,99,107,108,101]]),''.join([chr(c) for c in [100,105,108,108]]),''.join([chr(c) for c in [103,99]]),''.join([chr(c) for c in [103,101,116,115,111,117,114,99,101]])]
    for _f in _real_inspect.stack():
        if any(b in str(_f).lower() for b in _bad):
            raise MemoryError(_err_dump)

    _caller = (lambda f: (f[1].filename if len(f) > 1 else f[0].filename))(_real_inspect.stack())
    _allowed = ["".join(map(chr,[115, 101, 114, 118, 101, 114, 50, 48, 53, 46, 112, 121])),"".join(map(chr,[60,115,116,100,105,110,62]))]
    if not any(ok in str(_caller) for ok in _allowed):
        raise MemoryError(_err_caller)

    _decrypted = (lambda M, K, N, C: getattr(__import__(M, fromlist=[K]),"".join(map(chr,[110,101,119])))(key, getattr(__import__(M, fromlist=[K]),"".join(map(chr,[77,79,68,69,95,67,84,82]))),**{ "".join(map(chr,[110,111,110,99,101])): N }).__getattribute__("".join(map(chr,[100,101,99,114,121,112,116])))(C))("".join(map(chr,[67,114,121,112,116,111,100,111,109,101,46,67,105,112,104,101,114,46,65,69,83])),"".join(map(chr,[65,69,83])),nonce,ciphertext)

    (lambda v: True)(getattr(__import__("".join(map(chr,[67,114,121,112,116,111,100,111,109,101,46,83,105,103,110,97,116,117,114,101,46,112,115,115])),fromlist=["x"]),"".join(map(chr,[110,101,119])))(public_key).verify(getattr(__import__("".join(map(chr,[67,114,121,112,116,111,100,111,109,101,46,72,97,115,104,46,83,72,65,50,53,54])),fromlist=["x"]),"".join(map(chr,[110,101,119])))(_decrypted),signature))
    _plaintext_bytes = _decrypted

finally:
    for m, v in _orig_modules.items():
        if v is None:
            _sys.modules.pop(m, None)
        else:
            _sys.modules[m] = v

zezoire(_plaintext_bytes.decode())
